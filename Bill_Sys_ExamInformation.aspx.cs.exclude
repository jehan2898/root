using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Componend;

public partial class Bill_Sys_ExamInformation : System.Web.UI.Page
{

    private SaveOperation _saveOperation;
    private EditOperation _editOperation;
    private ListOperation _listOperation;

    protected void Page_Load(object sender, EventArgs e)
    {
        Session["PatientID"] = "PI00003";
        TreeMenuControl1.ROLE_ID = ((Bill_Sys_UserObject)Session["USER_OBJECT"]).SZ_USER_ROLE;
        txtCompanyID.Text = ((Bill_Sys_BillingCompanyObject)Session["BILLING_COMPANY_OBJECT"]).SZ_COMPANY_ID;
        txtPatientID.Text = Session["PatientID"].ToString();

        if (Page.IsPostBack == false)
        {
            LoadData();
            passInformationToLoadData();
        }

        
    }


    protected void btnSaveAndGoToNext_Click(object sender, EventArgs e)
    {
        _saveOperation = new SaveOperation();
        WorkerTemplate _obj = new WorkerTemplate();
        try
        {
            if (_obj.CheckPatientExist("SP_MST_EXAM_INFORMATION", Session["PatientID"].ToString()) == false)
            {
                _saveOperation.WebPage = this.Page;
                _saveOperation.Xml_File = "ExamInformation.xml";
                _saveOperation.SaveMethod();
            }
            else
            {
                updatedata();
            }

            Save_Patient_Compliments();
            Save_Patient_Injury();
            Save_Patient_Physical_Exam();
            Response.Redirect("Bill_Sys_DoctorOpinion.aspx",false);


        }
        catch (Exception ex)
        {

            string strError = ex.Message.ToString();
            strError = strError.Replace("\n", " ");
            Response.Redirect("Bill_Sys_ErrorPage.aspx?ErrMsg=" + strError);
        }
    }

    public void updatedata()
    {
        _editOperation = new EditOperation();
        try
        {
           
            _editOperation.Primary_Value = Session["PatientID"].ToString();
            _editOperation.WebPage = this.Page;
            _editOperation.Xml_File = "ExamInformation.xml";
            _editOperation.UpdateMethod();

        }
        catch (Exception ex)
        {
            string strError = ex.Message.ToString();
            strError = strError.Replace("\n", " ");
            Response.Redirect("Bill_Sys_ErrorPage.aspx?ErrMsg=" + strError);
        }
    }

    protected void LoadData()
    {
        _editOperation = new EditOperation();
        try
        {

            _editOperation.Primary_Value = Session["PatientID"].ToString();
            _editOperation.WebPage = this.Page;
            _editOperation.Xml_File = "ExamInformation.xml";
            _editOperation.LoadData();

            
        }
        catch (Exception ex)
        {

            string strError = ex.Message.ToString();
            strError = strError.Replace("\n", " ");
            Response.Redirect("Bill_Sys_ErrorPage.aspx?ErrMsg=" + strError);
        }
    }


    #region "Load Data"

    public void passInformationToLoadData()
    {
        
        DataSet _objDataSet = new DataSet();
        WorkerTemplate _objWR = new WorkerTemplate();
        _objDataSet = _objWR.getPatientComplaints(txtPatientID.Text);
        LoadCheckBoxAndTextBox(_objDataSet);

        _objDataSet.Clear();
        _objDataSet = _objWR.getPatientInjuryType(txtPatientID.Text);
        LoadCheckBoxAndTextBox(_objDataSet);

        _objDataSet.Clear();
        _objDataSet = _objWR.getPatientPhysicalExam(txtPatientID.Text);
        LoadCheckBoxAndTextBox(_objDataSet);


    }


    public void LoadCheckBoxAndTextBox(DataSet p_objDataSet)
    {
        try
        {
            foreach (DataRow obj1 in p_objDataSet.Tables[0].Rows)
            {
                for (int j = 0; j <= pnlExamInformation.Controls.Count - 1; j++)
                {
                    if (pnlExamInformation.Controls[j].ID != null)
                    {
                        if (pnlExamInformation.Controls[j].GetType() == typeof(CheckBox))
                        {
                            CheckBox objCheckBox;
                            objCheckBox = (CheckBox)pnlExamInformation.Controls[j];
                            if (objCheckBox.Text == obj1[0].ToString())
                            {
                                objCheckBox.Checked = true;
                                String szID = objCheckBox.ID;
                                String szTxtID = szID.Replace("chk", "txt");

                                TextBox objTextBox;
                                objTextBox = (TextBox)pnlExamInformation.FindControl(szTxtID);
                                if (objTextBox != null)
                                    objTextBox.Text = obj1[1].ToString();

                            }
                        }
                    }
                }
            }

        }
        catch (Exception ex)
        {
            
            throw;
        }
    }

    #endregion



    #region "Save Data"

    public void Save_Patient_Compliments()
    {
        try
        {
            WorkerTemplate _objWT;
            _objWT = new WorkerTemplate();
            _objWT.deletePatientComplaints(txtPatientID.Text.ToString());


            if (chkNumbnessTingling.Checked)
            {
                passInformationToSave(chkNumbnessTingling.Text,txtNumbnessTingling.Text);  
            }
            if(chkSwelling.Checked)
            {
                passInformationToSave(chkSwelling.Text,txtSwelling.Text);    
            }

            if(chkPain.Checked)
            {
                passInformationToSave(chkPain.Text,txtPain.Text);    
            }

            if(chkWeakness.Checked)
            {
                passInformationToSave(chkWeakness.Text, txtWeakness.Text);    
            }

            if(chkStiffness.Checked)
            {
                passInformationToSave(chkStiffness.Text, txtStiffness.Text);    
            }

            if(chkOther.Checked)
            {
                passInformationToSave(chkOther.Text, txtOtherExamInfo.Text);    
            }

        }
        catch (Exception ex)
        {
            
            string strError = ex.Message.ToString();
            strError = strError.Replace("\n", " ");
            Response.Redirect("Bill_Sys_ErrorPage.aspx?ErrMsg=" + strError);
        }
    }

    public void passInformationToSave(string p_szText,string p_szDescription)
    {
        WorkerTemplate _objWT;
        try
        {
            ArrayList _objAL = new ArrayList();
            _objAL.Add(p_szText);
            _objAL.Add(p_szDescription);
            _objAL.Add(txtPatientID.Text.ToString());
            _objAL.Add(txtCompanyID.Text.ToString());
            _objAL.Add("ADD");

            _objWT = new WorkerTemplate();
            _objWT.savePatientComplaints(_objAL);
        }
        catch (Exception ex)
        {
            throw;
        }
    }


    public void Save_Patient_Injury()
    {
        try
        {
            WorkerTemplate _objWT;
            _objWT = new WorkerTemplate();
            _objWT.deletePatientInjury(txtPatientID.Text.ToString());


            if (chkAbrasion.Checked)
            {
                passPatientInjuryToSave(chkAbrasion.Text, txtAbrasion.Text);
            }

             if (chkInfectiousDisease.Checked)
            {
                passPatientInjuryToSave(chkInfectiousDisease.Text, txtInfectiousDisease.Text);
            }

             if (chkAmputation.Checked)
            {
                passPatientInjuryToSave(chkAmputation.Text, txtAmputation.Text);
            }

             if (chkInhalationExposure.Checked)
            {
                passPatientInjuryToSave(chkInhalationExposure.Text, txtInhalationExposure.Text);
            }

             if (chkAvulsion.Checked)
            {
                passPatientInjuryToSave(chkAvulsion.Text, txtAvulsion.Text);
            }

             if (chkLaceration.Checked)
            {
                passPatientInjuryToSave(chkLaceration.Text, txtLaceration.Text);
            }

             if (chkBite.Checked)
            {
                passPatientInjuryToSave(chkBite.Text, txtBite.Text);
            }

             if (chkNeedleStick.Checked)
            {
                passPatientInjuryToSave(chkNeedleStick.Text, txtNeedleStick.Text);
            }

             if (chkBurn.Checked)
            {
                passPatientInjuryToSave(chkBurn.Text, txtBurn.Text);
            }

             if (chkPoisoningToxicEffects.Checked)
            {
                passPatientInjuryToSave(chkPoisoningToxicEffects.Text, txtPoisoningToxicEffects.Text);
            }

             if (chkContusionHematoma.Checked)
            {
                passPatientInjuryToSave(chkContusionHematoma.Text, txtContusionHematoma.Text);
            }

             if (chkPsychological.Checked)
            {
                passPatientInjuryToSave(chkPsychological.Text, txtPsychological.Text);
            }

             if (chkCrushInjury.Checked)
            {
                passPatientInjuryToSave(chkCrushInjury.Text, txtCrushInjury.Text);
            }

             if (chkPunctureWound.Checked)
            {
                passPatientInjuryToSave(chkPunctureWound.Text, txtPunctureWound.Text);
            }

             if (chkDermatitis.Checked)
            {
                passPatientInjuryToSave(chkDermatitis.Text, txtDermatitis.Text);
            }

             if (chkRepetitiveStrainInjury.Checked)
            {
                passPatientInjuryToSave(chkRepetitiveStrainInjury.Text, txtRepetitiveStrainInjury.Text);
            }

             if (chkDislocation.Checked)
            {
                passPatientInjuryToSave(chkDislocation.Text, txtDislocation.Text);
            }

             if (chkSpinalCordInjury.Checked)
            {
                passPatientInjuryToSave(chkSpinalCordInjury.Text, txtSpinalCordInjury.Text);
            }

             if (chkFracture.Checked)
            {
                passPatientInjuryToSave(chkFracture.Text, txtFracture.Text);
            }

             if (chkSprainStrain.Checked)
            {
                passPatientInjuryToSave(chkSprainStrain.Text, txtSprainStrain.Text);
            }

            if (chkHearingLoss.Checked)
            {
                passPatientInjuryToSave(chkHearingLoss.Text, txtHearingLoss.Text);
            }

            if (chkTornLigamentTendonOrMuscle.Checked)
            {
                passPatientInjuryToSave(chkTornLigamentTendonOrMuscle.Text, txtTornLigamentTendonOrMuscle.Text);
            }

            if (chkHernia.Checked)
            {
                passPatientInjuryToSave(chkHernia.Text, txtHernia.Text);
            }

            if (chkVisionLoss.Checked)
            {
                passPatientInjuryToSave(chkVisionLoss.Text, txtVisionLoss.Text);
            }

            if (chkOtherNatureOfInjury.Checked)
            {
                passPatientInjuryToSave(chkOtherNatureOfInjury.Text, txtOtherNatureOfInjury.Text);
            }
            

        }
        catch (Exception ex)
        {

            string strError = ex.Message.ToString();
            strError = strError.Replace("\n", " ");
            Response.Redirect("Bill_Sys_ErrorPage.aspx?ErrMsg=" + strError);
        }
    }

    public void passPatientInjuryToSave(string p_szText, string p_szDescription)
    {
        WorkerTemplate _objWT;
        try
        {
            ArrayList _objAL = new ArrayList();
            _objAL.Add(p_szText);
            _objAL.Add(p_szDescription);
            _objAL.Add(txtPatientID.Text.ToString());
            _objAL.Add(txtCompanyID.Text.ToString());
            _objAL.Add("ADD");

            _objWT = new WorkerTemplate();
            _objWT.savePatientInjury(_objAL);
        }
        catch (Exception ex)
        {
            throw;
        }
    }


    public void Save_Patient_Physical_Exam()
    {
        try
        {
            WorkerTemplate _objWT;
            _objWT = new WorkerTemplate();
            _objWT.deletePatientPhysicalExam(txtPatientID.Text.ToString());


            if (chkNoneAtPresent.Checked)
            {
                passPatientPhysicalExamToSave(chkNoneAtPresent.Text,"");
            }

            if (chkBruising.Checked)
            {
                passPatientPhysicalExamToSave(chkBruising.Text, txtBruising.Text);
            }

            if (chkBurns.Checked)
            {
                passPatientPhysicalExamToSave(chkBurns.Text, txtBurns.Text);
            }

            if (chkCrepitation.Checked)
            {
                passPatientPhysicalExamToSave(chkCrepitation.Text, txtCrepitation.Text);
            }

            if (chkDeformity.Checked)
            {
                passPatientPhysicalExamToSave(chkDeformity.Text, txtDeformity.Text);
            }

            if (chkEdema.Checked)
            {
                passPatientPhysicalExamToSave(chkEdema.Text, txtEdema.Text);
            }

            if (chkHematomaLumpSwelling.Checked)
            {
                passPatientPhysicalExamToSave(chkHematomaLumpSwelling.Text, txtHematomaLumpSwelling.Text);
            }

            if (chkJointEffusion.Checked)
            {
                passPatientPhysicalExamToSave(chkJointEffusion.Text, txtJointEffusion.Text);
            }

            if (chkLacerationSutures.Checked)
            {
                passPatientPhysicalExamToSave(chkLacerationSutures.Text, txtLacerationSutures.Text);
            }

            if (chkPainTenderness.Checked)
            {
                passPatientPhysicalExamToSave(chkPainTenderness.Text, txtPainTenderness.Text);
            }

            if (chkScar.Checked)
            {
                passPatientPhysicalExamToSave(chkScar.Text, txtScar.Text);
            }

            if (chkOtherPhysicalInfo.Checked)
            {
                passPatientPhysicalExamToSave(chkOtherPhysicalInfo.Text, txtOtherPhysicalInfo.Text);
            }

            if (chkNeuromuscularFindings.Checked)
            {
                passPatientPhysicalExamToSave(chkNeuromuscularFindings.Text,"");
            }

            if (chkAbnormalRestrictedROM.Checked)
            {
                passPatientPhysicalExamToSave(chkAbnormalRestrictedROM.Text, "");
            }

            if (chkActiveROM.Checked)
            {
                passPatientPhysicalExamToSave(chkActiveROM.Text, txtActiveROM.Text);
            }

            if (chkPassiveROM.Checked)
            {
                passPatientPhysicalExamToSave(chkPassiveROM.Text, txtPassiveROM.Text);
            }

            if (chkGait.Checked)
            {
                passPatientPhysicalExamToSave(chkGait.Text, txtGait.Text);
            }

            if (chkPalpableMuscleSpasm.Checked)
            {
                passPatientPhysicalExamToSave(chkPalpableMuscleSpasm.Text, txtPalpableMuscleSpasm.Text);
            }

            if (chkReflexes.Checked)
            {
                passPatientPhysicalExamToSave(chkReflexes.Text, txtReflexes.Text);
            }

            if (chkSensation.Checked)
            {
                passPatientPhysicalExamToSave(chkSensation.Text, txtSensation.Text);
            }

            if (chkStrengthWeakness.Checked)
            {
                passPatientPhysicalExamToSave(chkStrengthWeakness.Text, txtStrengthWeakness.Text);
            }

            if (chkWastingMuscleAtrophy.Checked)
            {
                passPatientPhysicalExamToSave(chkWastingMuscleAtrophy.Text, txtWastingMuscleAtrophy.Text);
            }

            


        }
        catch (Exception ex)
        {

            string strError = ex.Message.ToString();
            strError = strError.Replace("\n", " ");
            Response.Redirect("Bill_Sys_ErrorPage.aspx?ErrMsg=" + strError);
        }
    }

    public void passPatientPhysicalExamToSave(string p_szText, string p_szDescription)
    {
        WorkerTemplate _objWT;
        try
        {
            ArrayList _objAL = new ArrayList();
            _objAL.Add(p_szText);
            _objAL.Add(p_szDescription);
            _objAL.Add(txtPatientID.Text.ToString());
            _objAL.Add(txtCompanyID.Text.ToString());
            _objAL.Add("ADD");

            _objWT = new WorkerTemplate();
            _objWT.savePatientPhysicalExam(_objAL);
        }
        catch (Exception ex)
        {
            throw;
        }
    }


    #endregion



    protected void btnCancel_Click(object sender, EventArgs e)
    {

    }
}
